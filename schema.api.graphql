schema {
    query: Query
}

type Query {
    check(
        product: ProductCheckInput!
    ): ProductCheckResult!
}

interface Service {
    id: ID!
    productId: String!
}

type AService implements Service {
    id: ID!
    productId: String!
    dooms: [[ADoom!]!]!
}

type ALoad {
    code: String!
}

type ADoom {
    loads: [ALoad!]!
    code: String!
    description: String
    searchCount: Int
}

type Product {
    rules: [String!]!
    id: ID!
    notes: [String!]!
    services: [Service!]!
}

type ProductCheckResult {
    product: Product
    success: Boolean!
}

input ProductCheckInput {
    searchId: String!
    searchProductId: String!
}

scalar Date

scalar DateTime

scalar Time